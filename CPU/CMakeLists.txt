cmake_minimum_required(VERSION 3.10)
project(RTOS_CPU C)
enable_language(ASM)

if (DEFINED CPU_MODEL)
    set(RTOS_CPU_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/${CPU_MODEL} CACHE STRING "" FORCE)
    include_directories(${RTOS_CPU_SOURCE_DIR})
endif ()

file(GLOB SOURCES ${RTOS_CPU_SOURCE_DIR}/*.c)
foreach (item IN LISTS SOURCES)
    message(STATUS "[${PROJECT_NAME}] SOURCE: ${item}")
endforeach ()

add_library(${PROJECT_NAME} ${SOURCES})

if (CMAKE_C_COMPILER_ID MATCHES ARMCC)
    file(GLOB COMPILER_SOURCES ${RTOS_CPU_SOURCE_DIR}/ARMCC/*.c)
    foreach (item IN LISTS COMPILER_SOURCES)
        message(STATUS "[${PROJECT_NAME}] SOURCE: ${item}")
    endforeach ()
    target_sources(${PROJECT_NAME} PUBLIC  ${COMPILER_SOURCES})
    target_include_directories(${PROJECT_NAME} PUBLIC ${RTOS_CPU_SOURCE_DIR}/ARMCC/)
elseif (CMAKE_C_COMPILER_ID MATCHES GNU)
    file(GLOB COMPILER_SOURCES ${RTOS_CPU_SOURCE_DIR}/GCC/*.c)
    target_sources(${PROJECT_NAME} PUBLIC  ${COMPILER_SOURCES})
    target_include_directories(${PROJECT_NAME} PUBLIC ${RTOS_CPU_SOURCE_DIR}/GCC/)
    foreach (item IN LISTS COMPILER_SOURCES)
        message(STATUS "[${PROJECT_NAME}] SOURCE: ${item}")
    endforeach ()
endif ()

target_include_directories(${PROJECT_NAME} PUBLIC ${RTOS_CPU_SOURCE_DIR})
target_link_libraries(${PROJECT_NAME} PUBLIC RTOS_COMPILER)
