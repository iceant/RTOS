<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\UB_GD32F470VGT6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\UB_GD32F470VGT6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed May 22 15:17:17 2024
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[6d]">BootThread_Entry</a> from main.o(i.BootThread_Entry) referenced from main.o(i.main)
 <LI><a href="#[6]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[22]">CAN0_EWMC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[20]">CAN0_RX0_IRQHandler</a> from bsp_can0.o(i.CAN0_RX0_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[21]">CAN0_RX1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[1f]">CAN0_TX_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4e]">CAN1_EWMC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4c]">CAN1_RX0_IRQHandler</a> from bsp_can1.o(i.CAN1_RX0_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4d]">CAN1_RX1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4b]">CAN1_TX_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5a]">DCI_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[17]">DMA0_Channel0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[18]">DMA0_Channel1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[19]">DMA0_Channel2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel5_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel6_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3b]">DMA0_Channel7_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[44]">DMA1_Channel0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[45]">DMA1_Channel1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[46]">DMA1_Channel2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[47]">DMA1_Channel3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[48]">DMA1_Channel4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[50]">DMA1_Channel5_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[51]">DMA1_Channel6_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[52]">DMA1_Channel7_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from gd32f4xx_it.o(i.DebugMon_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[49]">ENET_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4a]">ENET_WKUP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3c]">EXMC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[34]">EXTI10_15_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[23]">EXTI5_9_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[10]">FMC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from cpu_hardfault.o(.emb_text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[66]">HardFault_Handler_C</a> from cpu_hardfault.o(i.HardFault_Handler_C) referenced from cpu_hardfault.o(.emb_text)
 <LI><a href="#[2c]">I2C0_ER_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2b]">I2C0_EV_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[55]">I2C2_ER_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[54]">I2C2_EV_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[64]">IPA_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[d]">LVD_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from cpu_pendsv.o(.emb_text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[11]">RCU_CTC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2f]">SPI0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5f]">SPI3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[60]">SPI4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[61]">SPI5_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from cpu_svc.o(.emb_text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from gd32f4xx_it.o(i.SysTick_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_gd32f4xx_1.o(i.SystemInit) referenced from startup_gd32f450_470.o(.text)
 <LI><a href="#[e]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[24]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[27]">TIMER0_Channel_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[26]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[25]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[28]">TIMER1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[29]">TIMER2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2a]">TIMER3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3e]">TIMER4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[42]">TIMER5_DAC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[43]">TIMER6_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[37]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3a]">TIMER7_Channel_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[39]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[38]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[63]">TLI_ER_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[62]">TLI_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5b]">TRNG_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[40]">UART3_IRQHandler</a> from bsp_rs4852.o(i.UART3_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5d]">UART6_IRQHandler</a> from bsp_rs4851.o(i.UART6_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5e]">UART7_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[31]">USART0_IRQHandler</a> from bsp_usart0.o(i.USART0_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[6a]">USART0_RxThread_Entry</a> from use_usart0.o(i.USART0_RxThread_Entry) referenced from use_usart0.o(i.USE_USART0_Init)
 <LI><a href="#[69]">USART0__RxHandler</a> from use_usart0.o(i.USART0__RxHandler) referenced from use_usart0.o(i.USART0_RxThread_Entry)
 <LI><a href="#[32]">USART1_IRQHandler</a> from bsp_usart1.o(i.USART1_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[53]">USART5_IRQHandler</a> from bsp_rs4853.o(i.USART5_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4f]">USBFS_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[36]">USBFS_WKUP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[57]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[56]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[59]">USBHS_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[58]">USBHS_WKUP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[c]">WWDGT_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[68]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f450_470.o(.text)
 <LI><a href="#[6c]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[6b]">fputc</a> from board.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[65]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6e]">os_idle_thread</a> from os_idle.o(i.os_idle_thread) referenced from os_idle.o(i.os_idle_init)
 <LI><a href="#[6f]">os_scheduler__timer_timeout</a> from os_scheduler.o(i.os_scheduler__timer_timeout) referenced from os_scheduler.o(i.os_scheduler_timed_wait)
 <LI><a href="#[70]">os_thread__exit</a> from os_thread.o(i.os_thread__exit) referenced from os_thread.o(i.os_thread_init)
 <LI><a href="#[0]">svc0</a> from cpu_svc.o(i.svc0) referenced 2 times from cpu_svc.o(.data)
 <LI><a href="#[1]">svc1</a> from cpu_svc.o(i.svc1) referenced 2 times from cpu_svc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[71]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[10e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[10f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[111]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[112]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cpu_hardfault.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, cpu_pendsv.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cpu_svc.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SVC_Handler &rArr; SVC_Handler_C &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_init
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_memory_pool
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_init
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_find_str
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[72]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[11c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[11d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>BSP_USART0_EnableDMATx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_usart0.o(i.BSP_USART0_EnableDMATx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_USART0_EnableDMATx
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[86]"></a>BSP_USART0_EnableRxIRQ</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_usart0.o(i.BSP_USART0_EnableRxIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_USART0_EnableRxIRQ &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[89]"></a>BSP_USART0_Init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, bsp_usart0.o(i.BSP_USART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_USART0_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[97]"></a>BSP_USART0_Printf</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bsp_usart0.o(i.BSP_USART0_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_malloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>BSP_USART0_Send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_usart0.o(i.BSP_USART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_USART0_Send &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>

<P><STRONG><a name="[c2]"></a>BSP_USART0_SetRxHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_usart0.o(i.BSP_USART0_SetRxHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
</UL>

<P><STRONG><a name="[a4]"></a>Board_5V_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.Board_5V_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[9e]"></a>Board_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Board_Init &rArr; os_kernel_init &rArr; os_idle_init &rArr; os_thread_startup &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clksource_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_EnableRxIRQ
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_EnableDMATx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_5V_Enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BusFault_Handler &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bsp_can0.o(i.CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN0_RX0_IRQHandler &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bsp_can1.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>DS1307_DecodeBCD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds1307.o(i.DS1307_DecodeBCD))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetYear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetSecond
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetMonth
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetMinute
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetHour
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetDate
</UL>

<P><STRONG><a name="[a9]"></a>DS1307_GetDate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ds1307.o(i.DS1307_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS1307_GetDate &rArr; DS1307_GetRegByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetRegByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_DecodeBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
</UL>

<P><STRONG><a name="[a8]"></a>DS1307_GetHour</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ds1307.o(i.DS1307_GetHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS1307_GetHour &rArr; DS1307_GetRegByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetRegByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_DecodeBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
</UL>

<P><STRONG><a name="[a7]"></a>DS1307_GetMinute</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ds1307.o(i.DS1307_GetMinute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS1307_GetMinute &rArr; DS1307_GetRegByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetRegByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_DecodeBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
</UL>

<P><STRONG><a name="[aa]"></a>DS1307_GetMonth</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ds1307.o(i.DS1307_GetMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS1307_GetMonth &rArr; DS1307_GetRegByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetRegByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_DecodeBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
</UL>

<P><STRONG><a name="[b0]"></a>DS1307_GetRegByte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ds1307.o(i.DS1307_GetRegByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS1307_GetRegByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetYear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetSecond
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetMonth
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetMinute
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetHour
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetDate
</UL>

<P><STRONG><a name="[a6]"></a>DS1307_GetSecond</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ds1307.o(i.DS1307_GetSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS1307_GetSecond &rArr; DS1307_GetRegByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetRegByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_DecodeBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
</UL>

<P><STRONG><a name="[ab]"></a>DS1307_GetYear</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ds1307.o(i.DS1307_GetYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS1307_GetYear &rArr; DS1307_GetRegByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetRegByte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_DecodeBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
</UL>

<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DebugMon_Handler &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>HardFault_Handler_C</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, cpu_hardfault.o(i.HardFault_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HardFault_Handler_C &rArr; show_hfsr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_hfsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_exc_return
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dfsr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cfsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu_hardfault.o(.emb_text)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MemManage_Handler &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NMI_Handler &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SVC_Handler_C</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cpu_svc.o(i.SVC_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SVC_Handler_C &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc0
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTick_Handler &rArr; os_scheduler_on_systick &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_on_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, system_gd32f4xx_1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_240m_12m_hxtal &rArr; rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>UART3_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp_rs4852.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART3_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART6_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp_rs4851.o(i.UART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART6_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART0_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bsp_usart0.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART0_IRQHandler &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp_usart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART5_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp_rs4853.o(i.USART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART5_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>USE_USART0_GetRxBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, use_usart0.o(i.USE_USART0_GetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>USE_USART0_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, use_usart0.o(i.USE_USART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USE_USART0_Init &rArr; os_thread_startup &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_millisecond
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_startup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UsageFault_Handler &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_exit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_enter
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[121]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_hfsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_exc_return
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dfsr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cfsr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stack_switch
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_memory_pool
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_hex_dump
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>

<P><STRONG><a name="[122]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[123]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d2]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[124]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[125]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[126]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[98]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>

<P><STRONG><a name="[127]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[128]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[129]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[af]"></a>can_message_receive</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32f4xx_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>cpu_stack_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cpu_stack.o(i.cpu_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_init
</UL>

<P><STRONG><a name="[f6]"></a>cpu_stack_is_switch_in_progress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpu_stack.o(i.cpu_stack_is_switch_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
</UL>

<P><STRONG><a name="[d8]"></a>cpu_stack_switch</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, cpu_stack.o(i.cpu_stack_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_startup
</UL>

<P><STRONG><a name="[6b]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, board.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[d9]"></a>free_ex</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, tlsf.o(i.free_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = free_ex &rArr; MAPPING_INSERT &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAPPING_INSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_memory_pool
</UL>

<P><STRONG><a name="[8a]"></a>gpio_af_set</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[8b]"></a>gpio_mode_set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[8c]"></a>gpio_output_options_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[dc]"></a>init_memory_pool</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tlsf.o(i.init_memory_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_memory_pool &rArr; free_ex &rArr; MAPPING_INSERT &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ex
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_area
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_init
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_millisecond
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_startup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_startup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_used
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_hex_dump
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_USART0_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_USART0_GetRxBuffer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e1]"></a>malloc_ex</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, tlsf.o(i.malloc_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAPPING_SEARCH
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAPPING_INSERT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIND_SUITABLE_BLOCK
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
</UL>

<P><STRONG><a name="[87]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f4xx_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_EnableRxIRQ
</UL>

<P><STRONG><a name="[a2]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[9f]"></a>nvic_vector_table_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[e2]"></a>os_idle_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, os_idle.o(i.os_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = os_idle_init &rArr; os_thread_startup &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_startup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_init
</UL>

<P><STRONG><a name="[ad]"></a>os_interrupt_enter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_interrupt.o(i.os_interrupt_enter))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>os_interrupt_exit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_interrupt.o(i.os_interrupt_exit))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>os_interrupt_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_interrupt.o(i.os_interrupt_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_init
</UL>

<P><STRONG><a name="[eb]"></a>os_interrupt_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_interrupt.o(i.os_interrupt_nest))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_push
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_on_systick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler__timer_timeout
</UL>

<P><STRONG><a name="[a1]"></a>os_kernel_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_kernel.o(i.os_kernel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_kernel_init &rArr; os_idle_init &rArr; os_thread_startup &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[df]"></a>os_kernel_startup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_kernel.o(i.os_kernel_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = os_kernel_startup &rArr; os_scheduler_startup &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>os_memory_free</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_memory.o(i.os_memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_memory_free &rArr; tlsf_free &rArr; free_ex &rArr; MAPPING_INSERT &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>

<P><STRONG><a name="[e3]"></a>os_memory_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_memory.o(i.os_memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_memory_init &rArr; init_memory_pool &rArr; free_ex &rArr; MAPPING_INSERT &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_memory_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_init
</UL>

<P><STRONG><a name="[99]"></a>os_memory_malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os_memory.o(i.os_memory_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>

<P><STRONG><a name="[f5]"></a>os_priority_cmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_priority.o(i.os_priority_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_take
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
</UL>

<P><STRONG><a name="[f3]"></a>os_priority_get_highest</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, os_priority.o(i.os_priority_get_highest))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_startup
</UL>

<P><STRONG><a name="[e4]"></a>os_priority_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_priority.o(i.os_priority_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_init
</UL>

<P><STRONG><a name="[ec]"></a>os_priority_mark</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, os_priority.o(i.os_priority_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_priority_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_push_front
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_push_back
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_push
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler__timer_timeout
</UL>

<P><STRONG><a name="[f4]"></a>os_priority_unmark</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, os_priority.o(i.os_priority_unmark))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_priority_unmark
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_startup
</UL>

<P><STRONG><a name="[fb]"></a>os_scheduler_current_thread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_scheduler.o(i.os_scheduler_current_thread))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_delay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_self
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
</UL>

<P><STRONG><a name="[e7]"></a>os_scheduler_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, os_scheduler.o(i.os_scheduler_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_init
</UL>

<P><STRONG><a name="[bc]"></a>os_scheduler_on_systick</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, os_scheduler.o(i.os_scheduler_on_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_scheduler_on_systick &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_tick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_skipped
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f0]"></a>os_scheduler_push</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, os_scheduler.o(i.os_scheduler_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = os_scheduler_push &rArr; os_priority_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_mark
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
</UL>

<P><STRONG><a name="[f1]"></a>os_scheduler_push_back</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, os_scheduler.o(i.os_scheduler_push_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = os_scheduler_push_back &rArr; os_priority_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_startup
</UL>

<P><STRONG><a name="[f2]"></a>os_scheduler_push_front</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, os_scheduler.o(i.os_scheduler_push_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = os_scheduler_push_front &rArr; os_priority_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
</UL>

<P><STRONG><a name="[ef]"></a>os_scheduler_schedule</STRONG> (Thumb, 1744 bytes, Stack size 48 bytes, os_scheduler.o(i.os_scheduler_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stack_switch
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stack_is_switch_in_progress
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_unmark
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_mark
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_get_highest
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_cmp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_delay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_take
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_on_systick
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_startup
</UL>

<P><STRONG><a name="[ee]"></a>os_scheduler_skipped</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_scheduler.o(i.os_scheduler_skipped))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_on_systick
</UL>

<P><STRONG><a name="[e8]"></a>os_scheduler_startup</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, os_scheduler.o(i.os_scheduler_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_scheduler_startup &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stack_switch
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_unmark
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_get_highest
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_startup
</UL>

<P><STRONG><a name="[f7]"></a>os_scheduler_timed_wait</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, os_scheduler.o(i.os_scheduler_timed_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_scheduler_timed_wait &rArr; os_timer_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_delay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_take
</UL>

<P><STRONG><a name="[fc]"></a>os_scheduler_yield</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, os_scheduler.o(i.os_scheduler_yield))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
</UL>

<P><STRONG><a name="[cc]"></a>os_semaphore_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_semaphore.o(i.os_semaphore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_semaphore_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_USART0_Init
</UL>

<P><STRONG><a name="[ca]"></a>os_semaphore_release</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, os_semaphore.o(i.os_semaphore_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = os_semaphore_release &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_yield
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_push_front
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_push
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_current_thread
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0__RxHandler
</UL>

<P><STRONG><a name="[c3]"></a>os_semaphore_take</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, os_semaphore.o(i.os_semaphore_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_semaphore_take &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_self
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_timed_wait
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
</UL>

<P><STRONG><a name="[fe]"></a>os_thread_delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_thread.o(i.os_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_thread_delay &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_timed_wait
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_current_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_mdelay
</UL>

<P><STRONG><a name="[ce]"></a>os_thread_init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, os_thread.o(i.os_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_thread_init &rArr; cpu_stack_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_node_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stack_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_USART0_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>os_thread_mdelay</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os_thread.o(i.os_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = os_thread_mdelay &rArr; os_thread_delay &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_from_millisecond
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
</UL>

<P><STRONG><a name="[fd]"></a>os_thread_self</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_thread.o(i.os_thread_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_current_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_take
</UL>

<P><STRONG><a name="[cf]"></a>os_thread_startup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_thread.o(i.os_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = os_thread_startup &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_schedule
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_USART0_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>os_tick_from_millisecond</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_tick.o(i.os_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_mdelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_USART0_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>os_timer_add</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, os_timer.o(i.os_timer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_timer_add
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer__add
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_timed_wait
</UL>

<P><STRONG><a name="[e5]"></a>os_timer_init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, os_timer.o(i.os_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_init
</UL>

<P><STRONG><a name="[ff]"></a>os_timer_node_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_timer.o(i.os_timer_node_init))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_init
</UL>

<P><STRONG><a name="[ed]"></a>os_timer_tick</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, os_timer.o(i.os_timer_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer__add
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_scheduler_on_systick
</UL>

<P><STRONG><a name="[de]"></a>rcu_clock_freq_get</STRONG> (Thumb, 264 bytes, Stack size 84 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>rcu_deinit</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, gd32f4xx_rcu.o(i.rcu_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_240m_12m_hxtal
</UL>

<P><STRONG><a name="[104]"></a>rcu_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[103]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, gd32f4xx_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
</UL>

<P><STRONG><a name="[85]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_EnableDMATx
</UL>

<P><STRONG><a name="[10b]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[10a]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[109]"></a>rcu_system_clock_source_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_system_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_240m_12m_hxtal
</UL>

<P><STRONG><a name="[a5]"></a>sFLASH_ReadID</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, spi_flash.o(i.sFLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sFLASH_ReadID &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootThread_Entry
</UL>

<P><STRONG><a name="[105]"></a>sFLASH_SendByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_flash.o(i.sFLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
</UL>

<P><STRONG><a name="[c5]"></a>sdk_hex_dump</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, sdk_hex.o(i.sdk_hex_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdk_hex_dump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>sdk_ringbuffer_find</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, sdk_ringbuffer.o(i.sdk_ringbuffer_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdk_ringbuffer_find &rArr; sdk_ringbuffer_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_used
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_find_str
</UL>

<P><STRONG><a name="[c6]"></a>sdk_ringbuffer_find_str</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sdk_ringbuffer.o(i.sdk_ringbuffer_find_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdk_ringbuffer_find_str &rArr; sdk_ringbuffer_find &rArr; sdk_ringbuffer_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_find
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
</UL>

<P><STRONG><a name="[c1]"></a>sdk_ringbuffer_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sdk_ringbuffer.o(i.sdk_ringbuffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_ringbuffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
</UL>

<P><STRONG><a name="[c8]"></a>sdk_ringbuffer_is_full</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdk_ringbuffer.o(i.sdk_ringbuffer_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
</UL>

<P><STRONG><a name="[107]"></a>sdk_ringbuffer_peek</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, sdk_ringbuffer.o(i.sdk_ringbuffer_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdk_ringbuffer_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_find
</UL>

<P><STRONG><a name="[c9]"></a>sdk_ringbuffer_put</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdk_ringbuffer.o(i.sdk_ringbuffer_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_ringbuffer_put
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0__RxHandler
</UL>

<P><STRONG><a name="[c7]"></a>sdk_ringbuffer_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_ringbuffer.o(i.sdk_ringbuffer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
</UL>

<P><STRONG><a name="[c4]"></a>sdk_ringbuffer_used</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdk_ringbuffer.o(i.sdk_ringbuffer_used))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RxThread_Entry
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_find
</UL>

<P><STRONG><a name="[a0]"></a>systick_clksource_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.systick_clksource_set))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[e9]"></a>tlsf_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tlsf.o(i.tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tlsf_free &rArr; free_ex &rArr; MAPPING_INSERT &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_free
</UL>

<P><STRONG><a name="[ea]"></a>tlsf_malloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tlsf.o(i.tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memory_malloc
</UL>

<P><STRONG><a name="[8e]"></a>usart_baudrate_set</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[bf]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Send
</UL>

<P><STRONG><a name="[8d]"></a>usart_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[96]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[c0]"></a>usart_flag_clear</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Send
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[92]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[88]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_EnableRxIRQ
</UL>

<P><STRONG><a name="[be]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f4xx_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[94]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[90]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[95]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>

<P><STRONG><a name="[8f]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6e]"></a>os_idle_thread</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_idle.o(i.os_idle_thread))
<BR>[Address Reference Count : 1]<UL><LI> os_idle.o(i.os_idle_init)
</UL>
<P><STRONG><a name="[6f]"></a>os_scheduler__timer_timeout</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, os_scheduler.o(i.os_scheduler__timer_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = os_scheduler__timer_timeout &rArr; os_priority_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_priority_mark
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_interrupt_nest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_scheduler.o(i.os_scheduler_timed_wait)
</UL>
<P><STRONG><a name="[70]"></a>os_thread__exit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, os_thread.o(i.os_thread__exit))
<BR>[Address Reference Count : 1]<UL><LI> os_thread.o(i.os_thread_init)
</UL>
<P><STRONG><a name="[101]"></a>os_timer__add</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, os_timer.o(i.os_timer__add))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_tick
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_add
</UL>

<P><STRONG><a name="[b5]"></a>show_cfsr</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, cpu_hardfault.o(i.show_cfsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_cfsr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[b7]"></a>show_dfsr</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, cpu_hardfault.o(i.show_dfsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_dfsr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[b8]"></a>show_exc_return</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cpu_hardfault.o(i.show_exc_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_exc_return &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[b6]"></a>show_hfsr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cpu_hardfault.o(i.show_hfsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_hfsr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[0]"></a>svc0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpu_svc.o(i.svc0))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu_svc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>svc1</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cpu_svc.o(i.svc1))
<BR>[Address Reference Count : 1]<UL><LI> cpu_svc.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>BootThread_Entry</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(i.BootThread_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BootThread_Entry &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_mdelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetYear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetSecond
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetMonth
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetMinute
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetHour
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_GetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[108]"></a>system_clock_240m_12m_hxtal</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, system_gd32f4xx_1.o(i.system_clock_240m_12m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = system_clock_240m_12m_hxtal &rArr; rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[bd]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f4xx_1.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = system_clock_config &rArr; system_clock_240m_12m_hxtal &rArr; rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_240m_12m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6a]"></a>USART0_RxThread_Entry</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, use_usart0.o(i.USART0_RxThread_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART0_RxThread_Entry &rArr; BSP_USART0_Printf &rArr; os_memory_malloc &rArr; tlsf_malloc &rArr; malloc_ex &rArr; MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_take
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_is_full
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_find_str
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_SetRxHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_used
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_hex_dump
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART0_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> use_usart0.o(i.USE_USART0_Init)
</UL>
<P><STRONG><a name="[69]"></a>USART0__RxHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, use_usart0.o(i.USART0__RxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART0__RxHandler &rArr; os_semaphore_release &rArr; os_scheduler_schedule &rArr; cpu_stack_switch &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ringbuffer_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> use_usart0.o(i.USART0_RxThread_Entry)
</UL>
<P><STRONG><a name="[a3]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[b2]"></a>FIND_SUITABLE_BLOCK</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tlsf.o(i.FIND_SUITABLE_BLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FIND_SUITABLE_BLOCK &rArr; ls_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_ex
</UL>

<P><STRONG><a name="[b9]"></a>MAPPING_INSERT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tlsf.o(i.MAPPING_INSERT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MAPPING_INSERT &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_ex
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ex
</UL>

<P><STRONG><a name="[bb]"></a>MAPPING_SEARCH</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tlsf.o(i.MAPPING_SEARCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MAPPING_SEARCH &rArr; ms_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_ex
</UL>

<P><STRONG><a name="[da]"></a>clear_bit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tlsf.o(i.clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_ex
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ex
</UL>

<P><STRONG><a name="[b3]"></a>ls_bit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tlsf.o(i.ls_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ls_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIND_SUITABLE_BLOCK
</UL>

<P><STRONG><a name="[ba]"></a>ms_bit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tlsf.o(i.ms_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ms_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAPPING_SEARCH
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAPPING_INSERT
</UL>

<P><STRONG><a name="[dd]"></a>process_area</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, tlsf.o(i.process_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = process_area
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_memory_pool
</UL>

<P><STRONG><a name="[db]"></a>set_bit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tlsf.o(i.set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_ex
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ex
</UL>

<P><STRONG><a name="[d3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d1]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[d6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6c]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
